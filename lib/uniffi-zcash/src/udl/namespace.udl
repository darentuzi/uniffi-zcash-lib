namespace zcash {
  /* zcash_client_backend::encoding */
  [Throws=ZcashError]
  ZcashExtendedFullViewingKey decode_extended_full_viewing_key(
    [ByRef] string hrp,
    [ByRef] string s
  );

  [Throws=ZcashError]
  ZcashExtendedSpendingKey decode_extended_spending_key(
    [ByRef] string hrp,
    [ByRef] string s
  );

  [Throws=ZcashError]
  ZcashPaymentAddress decode_payment_address(
    [ByRef] string hrp,
    [ByRef] string s
  );

  [Throws=ZcashError]
  ZcashTransparentAddress decode_transparent_address(
    [ByRef] sequence<u8> pubkey_version,
    [ByRef] sequence<u8> script_version,
    [ByRef] string s
  );

  string encode_extended_full_viewing_key(
    [ByRef] string hrp,
    ZcashExtendedFullViewingKey extfvk
  );

  string encode_extended_spending_key(
    [ByRef] string hrp,
    ZcashExtendedSpendingKey extsk
  );

  string encode_payment_address(
    [ByRef] string hrp,
    ZcashPaymentAddress addr
  );

  string encode_payment_address_p(
    ZcashConsensusParameters params,
    ZcashPaymentAddress addr
  );

  string encode_transparent_address(
    [ByRef] sequence<u8> pubkey_version,
    [ByRef] sequence<u8> script_version,
    ZcashTransparentAddress addr
  );

  string encode_transparent_address_p(
    ZcashConsensusParameters params,
    ZcashTransparentAddress addr
  );

  /* zcash_client_backend::decrypt */
  sequence<ZcashDecryptedOutput> decrypt_transaction(
      ZcashConsensusParameters params,
      ZcashBlockHeight height,
      ZcashTransaction tx,
      record<ZcashAccountId, ZcashUnifiedFullViewingKey> ufvks
  );

  /* zcash_client_backend::data_api::chain */
  [Throws=ZcashError]
  void scan_cached_blocks(
    ZcashConsensusParameters params,
    string fsblockdb_root,
    string db_data_path,
    ZcashBlockHeight height,
    u32 limit
  );

  /* zcash_client_backend::data_api::wallet::default */
  [Throws=ZcashError]
  void decrypt_and_store_transaction(ZcashConsensusParameters params, ZcashWalletDb z_db_data, ZcashTransaction tx);

  [Throws=ZcashError]
  ZcashTxId spend_main_fixed(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashMainFixedGreedyInputSelector input_selector, ZcashUnifiedSpendingKey usk, ZcashTransactionRequest request, ZcashOvkPolicy ovk_policy, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId spend_test_fixed(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashTestFixedGreedyInputSelector input_selector, ZcashUnifiedSpendingKey usk, ZcashTransactionRequest request, ZcashOvkPolicy ovk_policy, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId spend_main_zip317(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashMainZip317GreedyInputSelector input_selector, ZcashUnifiedSpendingKey usk, ZcashTransactionRequest request, ZcashOvkPolicy ovk_policy, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId spend_test_zip317(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashTestZip317GreedyInputSelector input_selector, ZcashUnifiedSpendingKey usk, ZcashTransactionRequest request, ZcashOvkPolicy ovk_policy, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId shield_transparent_funds_main_fixed(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashMainFixedGreedyInputSelector input_selector, u64 shielding_threshold, ZcashUnifiedSpendingKey usk, sequence<ZcashTransparentAddress> from_addrs, ZcashMemoBytes memo, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId shield_transparent_funds_test_fixed(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashTestFixedGreedyInputSelector input_selector, u64 shielding_threshold, ZcashUnifiedSpendingKey usk, sequence<ZcashTransparentAddress> from_addrs, ZcashMemoBytes memo, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId shield_transparent_funds_main_zip317(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashMainZip317GreedyInputSelector input_selector, u64 shielding_threshold, ZcashUnifiedSpendingKey usk, sequence<ZcashTransparentAddress> from_addrs, ZcashMemoBytes memo, u32 min_confirmations);

  [Throws=ZcashError]
  ZcashTxId shield_transparent_funds_test_zip317(ZcashWalletDb z_db_data, ZcashConsensusParameters params, ZcashLocalTxProver prover, ZcashTestZip317GreedyInputSelector input_selector, u64 shielding_threshold, ZcashUnifiedSpendingKey usk, sequence<ZcashTransparentAddress> from_addrs, ZcashMemoBytes memo, u32 min_confirmations);
};
